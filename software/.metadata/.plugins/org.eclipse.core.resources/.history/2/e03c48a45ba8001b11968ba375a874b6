/*
 * AudioKeyboard.c
 *
 *  Created on: Apr 25, 2021
 *      Author: jacob
 */
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include "altera_up_avalon_audio.h"
#include "altera_avalon_pio_regs.h"
#include <sys/alt_irq.h>

static void handle_audio_interrupts(void* context);
static void pio_init();
int PCM_Generator(int n, int f);

volatile int contextArray[4];
alt_up_audio_dev *audio_dev;
/* used for audio record/playback */
unsigned int l_buf;
unsigned int r_buf;

int main(void)
{
	/*Initialize Interrupts*/
	//pio_init();
	/* read and echo audio data */
	int n =0;
	int f = 440;
	int vaL0 = PCM_Generator(n,f);
	printf("%d \n",vaL0);
	n = 120;
	vaL0 = PCM_Generator(n,f);
	printf("%d \n",vaL0);
	n = 1000;
	vaL0 = PCM_Generator(n,f);
	printf("%d \n",vaL0);
	while(1)
	{

	}
}

static void handle_audio_interrupts(void* context){
	volatile int *contextArray_ptr = (volatile int*) context;
	if(alt_up_audio_read_interrupt_pending(audio_dev)){
		// read audio buffer
		alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
	}
	if(alt_up_audio_write_interrupt_pending(audio_dev)){
		// write audio buffer
		alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
	}
	return;
}

static void pio_init(){
	void* contextArray_ptr = (void*) &contextArray;
	/*Enable all 4 button interrupts*/
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0xE);
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x0);
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/AudioCore");
	if ( audio_dev == NULL)
	alt_printf ("Error: could not open audio device \n");
	else
	alt_printf ("Opened audio device \n");
	/*Enable read and write audio interrupts*/
	alt_up_audio_enable_write_interrupt(audio_dev);
	alt_up_audio_enable_read_interrupt(audio_dev);
	/* Register the ISRs */
	alt_irq_register( AUDIOCORE_IRQ, contextArray_ptr, handle_audio_interrupts);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
	return;
}

int PCM_Generator(int n, int f){
	int pcm_data = 0;
	double pcm_holder = 0.0;
	double discr_freq = n*f/48000;
	printf("%e \n",discr_freq);
	double input = 2*M_PI*discr_freq;
	printf("%e \n",input);
	pcm_holder = (sin(input) + 1);
	printf("%e \n",pcm_holder);
	pcm_holder = pcm_holder*8388607;
	printf("%e \n",pcm_holder);

	return pcm_data;
}

